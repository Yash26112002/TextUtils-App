{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","homesec","aboutsec","onClick","togglemode","role","htmlFor","defaultProps","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","useState","text","setText","findword","a","split","cnt","i","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","showalert","arr","substring","join","b","includes","push","document","getElementById","innerHTML","select","navigator","clipboard","writeText","About","mystyle","setmystyle","settext","aria-labelledby","data-bs-parent","App","setmode","setalert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8805508d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homesec}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutsec}</Link>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n      <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode===\"light\"?\"Dark Mode\":\"Light Mode\"}</label>\r\n    </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    homesec: PropTypes.string.isRequired,\r\n    aboutsec: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Set title here\",\r\n    aboutsec:\"About text here\"\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    };\r\n  return (\r\n    props.alert&&<div>\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const buttonupclick=()=>{\r\n        let newtext=text.toUpperCase();\r\n        setText(newtext);\r\n        props.showalert(\"converted to uppercase!!\",\"success\")\r\n    }\r\n    const buttonloclick=()=>{\r\n      let newtext=text.toLowerCase();\r\n      setText(newtext);\r\n      props.showalert(\"converted to lowercase!!\",\"success\")\r\n  }\r\n    const handleonchange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const buttonCapclick=()=>{\r\n      let arr=text.split(' ');\r\n      for(let i=0;i<arr.length;i++){\r\n        arr[i] =arr[i].charAt(0).toUpperCase() + arr[i].substring(1);\r\n      }\r\n      setText(arr.join(' '));\r\n      props.showalert(\"Capitalized the Word!!\",\"success\")\r\n\r\n    }\r\n    const buttonemailextracter=()=>{\r\n      let arr=text.split(' ');\r\n      let b=[];\r\n      for(let i=0;i<arr.length;i++ ){\r\n        if(arr[i].includes(\"@\")&&arr[i].includes(\".com\")){\r\n          b.push(arr[i]);\r\n        }\r\n      }\r\n      if(b.length===0){\r\n        props.showalert(\"does not contain any email !!\",\"danger\")\r\n\r\n      }\r\n      else{\r\n        props.showalert(\"email extracted!!\",\"success\")\r\n\r\n      }\r\n      for(let i=0;i<b.length;i++){\r\n        document.getElementById('email').innerHTML+=\"<li>\"+b[i]+\"</li>\";\r\n      }\r\n\r\n  }\r\n  const buttoncopy=()=>{\r\n    let text=document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Copied to clipboard!!\",\"success\")\r\n\r\n}\r\n  const buttonclear=()=>{\r\n    let newtext=\"\";\r\n    setText(newtext);\r\n    props.showalert(\"Cleared!!\",\"success\")\r\n\r\n}\r\n\r\n    const[text,setText]=useState('');//by default entertext\r\n    // text=\"hello\";//wrong way\r\n    // setText(\"hello yash write something here..\")//right\r\n\r\n    const findword=()=>{\r\n      let a=text.split(\" \");\r\n      let cnt=0;\r\n      for(let i=0;i<a.length;i++){\r\n        if(a[i]===\"\"){\r\n          continue;\r\n        }\r\n        else{\r\n          cnt++;\r\n        }\r\n      }\r\n      return cnt;\r\n    }\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"my-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleonchange} style={{backgroundColor: props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"black\"}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttonupclick}  >Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttonloclick} >Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttonCapclick} >Capitalize</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttonemailextracter} >Email Extracter</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttoncopy} >Copy Text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={buttonclear} >Clear Text</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{findword()} words, {text.length} characters</p>\r\n      <p>{0.008*(findword())} minutes to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter some text in above box to preview it\"}</p>\r\n      <h3>Extracted Email</h3>\r\n      <ul id=\"email\"></ul>\r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n// average time to read 125 words is 1 minute--data by google \r\n// for  1 word 0.008 minutes\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle, setmystyle] = useState({\r\n        color:\"black\",\r\n        backgroundColor:\"white\"\r\n    })\r\n    const [text, settext] = useState(\"Dark Mode\");\r\n    const togglestyle=()=>{\r\n        if(mystyle.color==\"black\"){\r\n            setmystyle({\r\n                color:\"white\",\r\n        backgroundColor:\"black\"\r\n            })\r\n            settext(\"Light Mode\");\r\n        }\r\n        else{\r\n            setmystyle({\r\n                color:\"black\",\r\n        backgroundColor:\"white\"\r\n            })\r\n            settext(\"Dark Mode\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container\" style={mystyle}>\r\n                <div className=\"accordion\" id=\"accordionExample\" style={mystyle}>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"container\">\r\n        <button onClick={togglestyle} className=\"btn btn-primary my-3\">{text}</button>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport { BrowserRouter as Router, Route,Link, Routes } from 'react-router-dom'\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const togglemode=()=>{\n    if(mode===\"light\"){\n      document.body.style.backgroundColor=\"#212529f0\"; //\n      // document.body.style.color=\"white\";\n      showalert(\"Dark Mode is On\",\"success\");\n      setmode(\"dark\");\n    }\n    else{\n        document.body.style.backgroundColor=\"white\";\n      // document.body.style.color=\"black\";\n      showalert(\"Light Mode is On\",\"success\");\n      setmode(\"light\");\n\n    }\n  }\n  const [alert, setalert] = useState(null);\n  const showalert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n    \n  return (\n    <div>\n      <Router>\n          <Navbar title=\"TextUtils\" homesec=\"Home\" aboutsec=\"About Us\" mode={mode} togglemode={togglemode}/>\n          <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About/>}>\n            </Route>\n            <Route exact path=\"/\" element={<TextForm showalert={showalert} mode={mode} heading=\"Enter the Text to analyze\"/>}>\n            </Route>\n          </Routes>\n        </div>\n        </Router>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}